#include <stdio.h>
#include <stdlib.h>

struct dijkstra
{
	char vertex;
	int found;
	int dist;
	char prev;
};

struct dijkstra *dtable = 0;

struct edge
{
	char v1;
	char v2;
	int weight;
	struct edge *next;
};
struct edge *edges = 0;

struct vertex
{
	char v;
	struct vertex *next;
	struct edge *connected;
};
struct vertex *vertexes = 0;

int howManyVertexes(void)
{
	int cnt = 0;
	struct vertex *temp = vertexes;

	while (temp != 0)
	{
		cnt += 1;
		temp = temp->next;
	}

	return cnt;
}


// v가 SLL에 있으면, 1
// 아니면 0을 반환
int isVertexInSLL(char v)
{
	struct vertex *temp = vertexes;

	while (temp != 0)
	{
		if (temp->v == v)
		{
			return 1;
		}
		temp = temp->next;
	}

	return 0;
}

void addVertex(char v)
{
	// 이미 vertexes SLL에 v가 있는지 확인하고,
	if (isVertexInSLL(v) == 0)
	{
		struct vertex *new_one = (struct vertex *)malloc(sizeof(struct vertex));
		new_one->v = v;
		new_one->next = 0;
		new_one->connected = 0;

		if (vertexes == 0)
		{
			vertexes = new_one;
			return;
		}
		struct vertex *temp = vertexes;
		while (temp->next != 0)
		{
			temp = temp->next;
		}
		temp->next = new_one;
	}
}

void addEdge(char v1, char v2, int weight)
{
	// vertex들만 뽑아서, vertexes SLL에 넣는다.
	addVertex(v1);
	addVertex(v2);

	struct edge *new_one = (struct edge *)malloc(sizeof(struct edge));
	new_one->v1 = v1;
	new_one->v2 = v2;
	new_one->weight = weight;
	new_one->next = 0;

	if (edges == 0)
	{
		edges = new_one;
		return;
	}
	else
	{
		struct edge *temp = edges;
		while (temp->next != 0)
		{
			temp = temp->next;
		}
		temp->next = new_one;
	}
}

// vertexes SLL에서 v를 담고 있는 노드를 찾아서
// 그 주소를 반환한다.
struct vertex *findVertex(char v)
{
	struct vertex *temp = vertexes;

	while (temp != 0)
	{
		if (temp->v == v)
		{
			return temp;
		}
		temp = temp->next;
	}
}

void addEdgeInfo(struct vertex *v1, struct vertex *v2, int weight)
{
	struct edge *new_one = (struct edge *)malloc(sizeof(struct edge));
	new_one->v2 = v2->v;
	new_one->weight = weight;
	new_one->next = 0;

	struct edge *temp = v1->connected;

	if (temp == 0)
	{
		v1->connected = new_one;
		return;
	}
	else
	{
		while (temp->next != 0)
		{
			temp = temp->next;
		}
		temp->next = new_one;
	}
}

void processEdges()
{
	struct edge *edgeTemp = edges;

	while (edgeTemp != 0)
	{
		// edge를 하나씩 뒤져가면서, graph 정보를 넣는다.
		// edgeTemp.v1 --> edgeTemp.v2 : 이 edge를 하나 넣고,
		// edgeTemp.v2 --> edgeTemp.v1 : 이 edge도 넣고,,
		struct vertex *v1 = findVertex(edgeTemp->v1);
		struct vertex *v2 = findVertex(edgeTemp->v2);
		addEdgeInfo(v1, v2, edgeTemp->weight);
		addEdgeInfo(v2, v1, edgeTemp->weight);
		edgeTemp = edgeTemp->next;
	}
}

void initDijkstraTable(void)
{
	// vertex 개수를 파악
	int vcnt = howManyVertexes();

	// table을 생성
	dtable = (struct dijkstra *)malloc(sizeof(struct dijkstra)*vcnt);

	// 초기화
	struct vertex *temp = vertexes;
	for (int i = 0; i < vcnt; i++)
	{
		dtable[i].vertex = temp->v;
		temp = temp->next;
		dtable[i].found = 0;
		dtable[i].dist = 200000000;
		dtable[i].prev = 0;
	}
}

// vertex v에 해당하는
// dijkstra table의 위치를 반환
int findVertexIndexFromDTable(char v)
{
	int vcnt = howManyVertexes();
	for (int i = 0; i < vcnt; i++)
	{
		if (dtable[i].vertex == v)
		{
			return i;
		}
	}
}

// 아직까지 최단경로가 결정되지 않았고,
// 최소 dist를 가진 vertex의 dtable에서의 index를 반환한다.
// 만약, 그런 vertex가 없으면, -1을 반환한다.
int nextShortestVertex(void)
{
	int vcnt = howManyVertexes();
	int shortestDist = 20000000;
	int shortestIdx = -1;

	for (int i = 0; i < vcnt; i++)
	{
		if (dtable[i].found == 0 &&
			dtable[i].dist < shortestDist)
		{
			shortestIdx = i;
			shortestDist = dtable[i].dist;
		}
	}
	return shortestIdx;
}


// 시작을 sVertex에서 한다.
void runDijkstra(char sVertex)
{
	int idx = findVertexIndexFromDTable(sVertex);
	dtable[idx].dist = 0;

	while (1)
	{
		int i = nextShortestVertex();
		if (i == -1)  // 더 이상 최단거리를 찾을 것이 없으므로 return
		{
			return;
		}
		dtable[i].found = 1; // 최단거리를 찾았음!!!!

		//vertex[i]의 neighbor vertext들에 대해서
		//	dist와 prev를 update
		struct edge *connectedOnes = findVertex(dtable[i].vertex)->connected;

		while (connectedOnes != 0)
		{
			int neighborIdx = findVertexIndexFromDTable(connectedOnes->v2);

			if (dtable[neighborIdx].dist > dtable[i].dist + connectedOnes->weight)
			{
				dtable[neighborIdx].dist = dtable[i].dist + connectedOnes->weight;
				dtable[neighborIdx].prev = dtable[i].vertex;
			}
			connectedOnes = connectedOnes->next;
		}
	}
}

int main(void)
{
	addEdge('A', 'B', 8);
	addEdge('A', 'C', 2);
	addEdge('B', 'C', 4);
	addEdge('B', 'D', 5);
	addEdge('C', 'D', 40);

	processEdges();

	initDijkstraTable();

	runDijkstra('A');  // 시작 vertex A로부터 dijkstra를 돌려봅시다.

	int c = howManyVertexes();
	for (int i = 0; i < c; i++)
	{
		printf("%c %d %d %c\n", dtable[i].vertex, dtable[i].found, dtable[i].dist,
			dtable[i].prev);
	}

	return 0;
}