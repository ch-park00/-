* hello.c 컴파일 과정

1. gcc -E hello.c > hello.i (preprocessing 수행. 매크로 처리=>define, include)
2. gcc -S hello.i : 어셈블리 코드로 변환(hello.s 파일이 생성됨)
3. as -c hello.s hello.o : 어셈블리 코드를 객체 코드(기계어)로 변환. hello.o파일이 생성됨
4. gcc -o hello hello.o : hello라는 실행 파일을 생성


* 간략화 
gcc -c hello.c -o hello.o : hello.c 소스 코드를 이용해 hello.o 객체 파일 생성
gcc hello.o -o hello : gcc 오브젝트 파일명 실행코드명 

* 라이브러리 생성
- 정적 라이브러리의 경우, ar rv 라이브러리명 object파일명 이런식으로 라이브러리 생성
이후 해당 라이브러리 이용해서 gcc 빌드를 진행할 경우에는 
1. main 함수에 해당하는 코드 오브젝트 코드로 변환 : gcc -c src/hello.c -o obj/hello.o
2. 이를 이용해 빌드 수행. : gcc -o bin/hello obj/hello.o -L./lib(라이브러리 디렉토리) -lfuncs(라이브러리명)

- 동적 라이브러리
object 코드 만들 시에 -fPIC(position independent) 옵션을 붙여줘야 한다.
myapp.c(main) foo.c goo.c libfuncs.h파일이 있다고 하면
gcc -fPIC -c src/foo.c -o obj/foo.o -I./include
gcc -fPIC -c src/goo.c -o obj/goo.o -I./include
gcc -fPIC -c src/myapp.c -o obj/myapp.o -I./include
gcc -fPIC -shared -Wl,-soname=libfuncs.so.1 -o lib/libfuncs.so.1.0 obj/foo.o obj/goo.o : 동적 라이브러리 생성(lib 디렉토리에 libfuncs.so.1.0이라는 파일이 생성된다)
gcc -o bin/myapp obj/myapp.o -L./lib -lfuncs : 실행 파일 생성
## 라이브러리를 생성한 이후, 링크 추가해야 한다
ln -s libfuncs.so.1.0 libfuncs.so
ln -s libfuncs.so.1.0 libfuncs.so.1
# 또한 해당 실행파일을 실행하기 위해서는 LD_LIBRARY_PATH라는 쉘 변수에 동적 라이브러리가 있는 폴더 위치가 export 되어야 하므로 다음 문장을 수행해야 한다.
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/라이브러리 경로
