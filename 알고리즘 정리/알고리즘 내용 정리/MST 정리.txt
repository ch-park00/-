MST(minimum spanning tree) : 최소의 edge로 모든 vertex가 연결된 tree

- 모든 vertex가 연결되어야 한다.

- 이중에서도 edge에 가중치가 있는 경우 가장 작은 가중치로 연결되어야 한다

- 이 때 edge 의 개수는 (vertex개수 -1)이 된다.

- weight가 없는 경우에는 DFS/BFS에 사용된 edge만 모아서 MST를 만들 수 있다.


구현 방법

- Kruskal 알고리즘 : greedy method(탐욕적인 방법)을 이용해 MST 구현
* 탐욕적 방법
매 순간순간마다 가장 좋다고 생각하는 것을 선택해 최종적 해답에 도달한다.
매 순간에는 최적의 해를 선택하지만 최종 선택지를 보면 최적이라는 보장이 없기 때문에
마지막에 검증이 필요하다.

1. edge의 weight에 따라 오름차순 정렬한다.
2. 차례대로 보면서 edge가 사이클을 생성하지 않도록 edge를 MST에 추가한다.
이 때, 사이클이 생성되지 않도록 하는 것은 union-find을 이용하면 된다.
이 과정을 MST edge가 vertex-1개가 될 때까지 반복한다.

* union-find
처음 MST 시작 시 각 vertex개수만큼 배열을 만들고 이 배열 값을 초기에 각 vertex 값으로 초기화한다.
그리고 edge 연결 시마다 연결한 vertex의 family를 통합시키는 과정을 거친다. 
연결할 edge가 사이클이 이뤄지는지 확인하기 위해서는 양쪽에 있는 vertex가 서로 다른 family로 이뤄지는 
edge만 연결하면 된다. 

- Prim 알고리즘 : 시작 지점에서부터 마지막까지 점점 집합을 확대시켜나가는 방법

1. 모든 vertex에 대해 key값을 무한대로 설정한다.
2. 시작 vertex의 key값=0으로 설정한다.
3. 모든 vertex중 가장 작은 key값을 가진 vertex를 선택한다. 단, 이때 이미 선택된 vertex는 제외한다.
4. 선택된 vertex와 연결된 edge를 보고 key값을 수정한다.
이 키값의 수정은 해당 vertex의 key>edge weight인 경우에만 key값을 weight값으로 수정한다.
5. 3으로 돌아가서 반복한다. 그리고 이 때 모든 vertex가 연결된 경우 중단한다.

union-find 알고리즘을 이용하면 Kruskal 알고리즘의 시간 복잡도는 간선들을 정렬하는 시간에 좌우된다.
즉, 간선 e개를 퀵 정렬과 같은 효율적인 알고리즘으로 정렬한다면
Kruskal 알고리즘의 시간 복잡도는 O(elog₂e) 이 된다.
Prim의 알고리즘의 시간 복잡도는 O(n^2) 이므로
그래프 내에 적은 숫자의 간선만을 가지는 ‘희소 그래프(Sparse Graph)’의 경우 Kruskal 알고리즘이 적합하고
그래프에 간선이 많이 존재하는 ‘밀집 그래프(Dense Graph)’ 의 경우는 Prim 알고리즘이 적합하다.