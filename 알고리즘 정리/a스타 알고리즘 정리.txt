다익스트라 알고리즘을 확장하여 만들어진 경로 탐색 알고리즘이다.
에이스타 알고리즘 이라고 읽는다.

 A* 알고리즘은 현재 상태의 비용을 g(x), 현재 상태에서 다음 상태로 이동할 때의 휴리스틱 함수를 h(x)라고 할 때, 
f(x) = g(x) + h(x)가 최소가 되는 지점을 우선적으로 탐색하는 방법이다. 이 f(x)가 작은 값부터 탐색하는 특성상 우선순위 큐가 사용된다.
 휴리스틱 함수 h(x)에 따라 성능이 극명하게 갈리며, f(x) = g(x)f(x)=g(x)일 때는 다익스트라 알고리즘과 동일하다.

휴리스틱 함수 : 출발 노드부터 도착 노드 n 까지의 경로 가중치. 즉, 현재 노드부터 도착지 노드까지의 추정값. 
경우에 따라 다른 함수를 사용하고 값이 달라진다.
ex) 현재 노드부터 도착 노드까지의 직선 거리.
g(x) : 시작 노드에서부터 현재 노드까지의 가중치 합.
f(x) : 최종 가중치 합. 휴리스틱 함수와 g(x)를 더한 값

그리고 구현 시 open list와 closed list 두개의 리스트가 필요. 
closed list : 이미 최단거리를 찾은 노드가 있는 list
open list : 검색 가능성이 있는 노드의 집합. 아직 최단거리를 찾지 못한 노드에서 최단거리 판단 시 사용.
open list의 경우 min heap으로 구성해 우선순위 큐를 통해 가장 작은 값을 쉽게 빼도록 한다.
리스트에는 F,G,H값을 저장한다.

동작 알고리즘(psuedo code)
1. 출발 노드를 오픈 리스트에 집어넣는다. 그리고 이때의 G=0이다.
2. 현재 오픈 리스트에서 가장 작은 f값을 가진 노드를 하나 pop한다.
3. 2에서 pop한 노드를 closed list에 추가한다. 
4. 이후 현재 노드에서 연결되어 있는 노드를 찾아보면서 연결되어 있는 노드의 f값을 계산한다. 
여기서 연결되어 있는 노드가 오픈 리스트에 없는 경우에는 f값 계산 후에 오픈 리스트에 추가한다.
연결되어 있는 노드가 이미 오픈 리스트에 있을 경우에는 계산된 f값이 저장되어 있는 f값보다 작을 경우에만 추가한다.
그리고 이 노드의 추가는 모두 추가하는 노드가 closed list에 없어야 한다.
5. 2~4과정을 도착 노드에 도착하기 전까지 반복해서 수행한다. 그리고 도착 노드에 도착하면 종료한다. 
도착 노드까지의 거리는 도착 노드의 f값이다.

참고 사이트
http://www.gisdeveloper.co.kr/?p=3897
https://namu.wiki/w/A*%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
https://leeyongjeon.tistory.com/entry/A-A-star-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98