dijkstra algorithm : 길찾기 

그래프에서 시작 vertex와 도착 vertex가 주어졌을 때, 최단 경로(최소 weight)로 경로 찾는 알고리즘.
단, 이 때 모든 edge의 가중치가 음이 아닌 양수인 경우에만 사용할 수 있다.

* 다익스트라 알고리즘 기본 로직

1. 각 vertex에 대해 현재 최단 경로를 찾은 상태인지,
   이 때 최단경로(weight)가 몇인지, 그리고 최단 경로의 이전 vertex를 저장하는 테이블을 생성한다.
2. 시작 vertex에 대해 최단 경로(weight)=0으로 설정한다.
3. 현재 최단 경로를 못찾은 vertex 중 최단 경로(weight)가 가장 작은 vertex를 찾는다.
4. 3에서 찾은 vertex의 found(최단 경로를 찾았는지 유무 여부)=1 로 수정하고, 연결된 edge
정보를 이용해서 table을 수정한다. 
수정 시에는 현재 vertex까지의 weight합+edge의 weight<해당 vertex의 table에서 weight값인 경우
table의 weight와 prev를 수정한다.
5. 3으로 돌아가서 모두 다 찾거나 원하는 vertex가 도착 전까지 반복한다.


* 힙을 이용해서도 다익스트라 알고리즘 구현이 가능하다.
힙을 이용한 다익스트라 알고리즘.

1. 시작 vertex의 dist=0으로 설정하고 나머지 vertex의 dist=inf로 설정
2. 시작 vertex와 dist값을 heap에 집어넣는다.(이 때, min heap으로 구성)
3. 힙에서 하나의 값을 꺼낸다.(이 때, min heap이기 때문에 1번을 꺼내면 된다)
4. 이 값을 dist 배열과 비교한다. 비교했을 때, dist 배열이 더 크거나 같은 경우에는 연산 수행.
   이 연산은 해당 vertex와 연결된 edge를 통해 기존의 dist배열보다 더 작아지는 vertex를 
    heap에 집어넣는다. 동시에 dist 배열 또한 갱신한다.
5. 3~4 과정을 dist배열이 더 작아지기 전까지 반복한다.

// 구현해보고 정리한 내용
1. 다익스트라 테이블을 만든다. 이 때, 각 vertex, 해당 vertex까지의 dist, 그리고 그 때 이전 vertex를 저장하는
테이블을 생성한다.
2. 시작 vertex를 제외한 나머지 vertex의 dist=무한대로 설정하고 시작 vertex의 경우에는 dist를 0으로 설정
3. 시작 vertex만 heap에 추가한다. 이 때, min heap으로 구성한다.
4. heap에서 데이터를 1개 꺼내온다.
5. 꺼내온 데이터가 테이블과 비교해 봤을 때, 꺼내온 데이터의 dist가 테이블의 dist보다 작거나 같은 경우에는 
방문하고 그 외에는 스킵한다.
6. 방문한 vertex의 경우에는, 테이블을 수정하는 과정을 거친다. 그리고 수정할 때 수정한 데이터를 
heap에 추가한다.
7. 4~6 과정을 도착지 도착 전까지 반복하거나 모든 vertex에 대해 끝나기 전까지 반복한다.