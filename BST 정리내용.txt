BST - binary search tree

값을 빠르게 검색할 때 효율적으로 활용이 가능하다.

왼쪽에는 root값을 기준으로 작은 값만 존재하고 오른쪽에는 큰 값만 존재한다.

따라서 가장 왼쪽 노드에 존재하는 노드부터 왼쪽 - 가운데 - 오른쪽 순으로 읽는 inorder travesal을 실시하게 되면 오름차순으로 데이터가 출력된다.

데이터 추가 시에 현재 값과 비교하면서 작을 경우에는 왼쪽으로 내려가고 클 경우에는 오른쪽으로 내려가게 된다.
그러다가 내려갈 곳이 없을 경우 그 자리에 새롭게 데이터를 추가한다.

삭제하는 경우에는 좀 복잡하다.
경우가 총 4가지.
1. 삭제할 데이터가 root
 * 데이터가 root만 존재할 경우 : root =0
 * 데이터가 root 외에 left/right만 존재할 경우 : root=root->left/right
 * 데이터가 root 외에 left/right 둘 다 존재하는 경우 : 4와 같은 방법으로 삭제

2. 삭제할 데이터의 child가 존재하지 않는 경우
 * 이전 노드찾고 이전 노드와 현재 연결되어 있는 링크 연결 끊고 free
3. 삭제할 데이터의 child가 1개인 경우
 * 현재 자리를 child node로 대체 후 free
4. 삭제할 데이터의 child가 2개인 경우
 * 대체 노드가 필요한데 이 노드는 크게 두 가지 : 삭제할 노드->left부터 시작해서 가장 큰 값 or 삭제할 노드->right에서 가장 작은 값
   이렇게 해서 찾은 노드를 삭제 위치에 대신 대체한다. 참고로 찾은 노드는 무조건 0 child or 1 child이다. 이 자식 처리도 필요하다.